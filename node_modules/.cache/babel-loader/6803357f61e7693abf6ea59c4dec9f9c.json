{"ast":null,"code":"//Enable add new key Enum\nexport const Action = Object.freeze({\n  LoadMemories: 'LoadMemories' // FinishAddingOrder:'FinishAddingOrder',\n  // EnterEditMode:'EnterEditMode',\n  // LeaveEditMode:'LeaveEditMode',\n  // FinishSavingMemory: 'FinishSavingMemory',\n  // FinishDeletingMemory: 'FinishDeletingMemory',\n\n}); //Action Creaters \n\nexport function loadMemories(memories) {\n  return {\n    type: Action.LoadMemories,\n    payload: memories\n  };\n} // export function finishAddingOrder(memory){\n//     return {\n//         type:Action.FinishAddingOrder,\n//         payload: memory,\n//     }\n// }\n\nfunction checkForErrors(response) {\n  if (!response.ok) {\n    throw Error(`${response.status}: ${response.statusText}`);\n  }\n\n  return response;\n}\n\nconst host = 'https://zhuj3128.duckdns.org:8442';\nexport function loadDay(month, day) {\n  // return function\n  return dispatch => {\n    //run background\n    fetch(`${host}/memories/${month}/${day}`).then(checkForErrors).then(response => response.json()).then(data => {\n      if (data.ok) {\n        dispatch(loadMemories(data.memories));\n      }\n    }).catch(e => console.error(e));\n  };\n}\nexport function startAddingOrder(year, month, day) {\n  const memory = {\n    year,\n    month,\n    day,\n    message: ''\n  };\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(memory)\n  };\n  return dispatch => {\n    fetch(`${host}/memories`, options).then(checkForErrors).then(response => response.json()).then(data => {\n      if (data.ok) {\n        memory.id = data.id;\n        dispatch(finishAddingOrder(memory));\n      }\n    }).catch(e => console.error(e));\n  };\n}","map":{"version":3,"sources":["C:/UWEC/CS268/Project2/CS268_WebProject2/project2/src/action.js"],"names":["Action","Object","freeze","LoadMemories","loadMemories","memories","type","payload","checkForErrors","response","ok","Error","status","statusText","host","loadDay","month","day","dispatch","fetch","then","json","data","catch","e","console","error","startAddingOrder","year","memory","message","options","method","headers","body","JSON","stringify","id","finishAddingOrder"],"mappings":"AAAA;AACA,OAAO,MAAMA,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc;AAChCC,EAAAA,YAAY,EAAE,cADkB,CAEhC;AACA;AACA;AACA;AACA;;AANgC,CAAd,CAAf,C,CAUP;;AACA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAA+B;AAClC,SAAO;AACHC,IAAAA,IAAI,EAACN,MAAM,CAACG,YADT;AAEHI,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,C,CAED;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,cAAT,CAAwBC,QAAxB,EAAiC;AAC7B,MAAG,CAACA,QAAQ,CAACC,EAAb,EAAgB;AACZ,UAAMC,KAAK,CAAE,GAAEF,QAAQ,CAACG,MAAO,KAAIH,QAAQ,CAACI,UAAW,EAA5C,CAAX;AACH;;AACD,SAAOJ,QAAP;AACH;;AAED,MAAMK,IAAI,GAAG,mCAAb;AAEA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAuBC,GAAvB,EAA2B;AAC9B;AACA,SAAOC,QAAQ,IAAI;AACf;AACAC,IAAAA,KAAK,CAAE,GAAEL,IAAK,aAAYE,KAAM,IAAGC,GAAI,EAAlC,CAAL,CACCG,IADD,CACMZ,cADN,EAECY,IAFD,CAEMX,QAAQ,IAAEA,QAAQ,CAACY,IAAT,EAFhB,EAGCD,IAHD,CAGME,IAAI,IAAE;AACR,UAAGA,IAAI,CAACZ,EAAR,EAAW;AACRQ,QAAAA,QAAQ,CAACd,YAAY,CAACkB,IAAI,CAACjB,QAAN,CAAb,CAAR;AACF;AACJ,KAPD,EAQCkB,KARD,CAQOC,CAAC,IAAEC,OAAO,CAACC,KAAR,CAAcF,CAAd,CARV;AASH,GAXD;AAYH;AAED,OAAO,SAASG,gBAAT,CAA0BC,IAA1B,EAA+BZ,KAA/B,EAAqCC,GAArC,EAAyC;AAC5C,QAAMY,MAAM,GAAG;AAACD,IAAAA,IAAD;AAAMZ,IAAAA,KAAN;AAAYC,IAAAA,GAAZ;AAAgBa,IAAAA,OAAO,EAAC;AAAxB,GAAf;AACA,QAAMC,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAC,MADK;AAEZC,IAAAA,OAAO,EAAC;AACJ,sBAAe;AADX,KAFI;AAKZC,IAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAeP,MAAf;AALO,GAAhB;AAOA,SAAOX,QAAQ,IAAI;AACfC,IAAAA,KAAK,CAAE,GAAEL,IAAK,WAAT,EAAoBiB,OAApB,CAAL,CACCX,IADD,CACMZ,cADN,EAECY,IAFD,CAEMX,QAAQ,IAAEA,QAAQ,CAACY,IAAT,EAFhB,EAGCD,IAHD,CAGME,IAAI,IAAE;AACR,UAAGA,IAAI,CAACZ,EAAR,EAAW;AACRmB,QAAAA,MAAM,CAACQ,EAAP,GAAYf,IAAI,CAACe,EAAjB;AACAnB,QAAAA,QAAQ,CAACoB,iBAAiB,CAACT,MAAD,CAAlB,CAAR;AACF;AACJ,KARD,EASCN,KATD,CASOC,CAAC,IAAEC,OAAO,CAACC,KAAR,CAAcF,CAAd,CATV;AAUH,GAXD;AAYH","sourcesContent":["//Enable add new key Enum\r\nexport const Action = Object.freeze({\r\n    LoadMemories: 'LoadMemories',\r\n    // FinishAddingOrder:'FinishAddingOrder',\r\n    // EnterEditMode:'EnterEditMode',\r\n    // LeaveEditMode:'LeaveEditMode',\r\n    // FinishSavingMemory: 'FinishSavingMemory',\r\n    // FinishDeletingMemory: 'FinishDeletingMemory',\r\n\r\n});\r\n\r\n//Action Creaters \r\nexport function loadMemories(memories){\r\n    return {\r\n        type:Action.LoadMemories,\r\n        payload: memories,\r\n    }\r\n}\r\n\r\n// export function finishAddingOrder(memory){\r\n//     return {\r\n//         type:Action.FinishAddingOrder,\r\n//         payload: memory,\r\n//     }\r\n// }\r\n\r\nfunction checkForErrors(response){\r\n    if(!response.ok){\r\n        throw Error(`${response.status}: ${response.statusText}`);\r\n    }\r\n    return response;\r\n}\r\n\r\nconst host = 'https://zhuj3128.duckdns.org:8442';\r\n\r\nexport function loadDay(month,day){\r\n    // return function\r\n    return dispatch => {\r\n        //run background\r\n        fetch(`${host}/memories/${month}/${day}`)\r\n        .then(checkForErrors)\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            if(data.ok){\r\n               dispatch(loadMemories(data.memories));\r\n            }\r\n        })\r\n        .catch(e=>console.error(e));\r\n    }\r\n}\r\n\r\nexport function startAddingOrder(year,month,day){\r\n    const memory = {year,month,day,message:''};\r\n    const options = {\r\n        method:'POST',\r\n        headers:{\r\n            'Content-Type':'application/json',\r\n        },\r\n        body:JSON.stringify(memory),\r\n    }\r\n    return dispatch => {\r\n        fetch(`${host}/memories`,options)\r\n        .then(checkForErrors)\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            if(data.ok){\r\n               memory.id = data.id;\r\n               dispatch(finishAddingOrder(memory));\r\n            }\r\n        })\r\n        .catch(e=>console.error(e));\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}