{"ast":null,"code":"// Take in old state of data store collaborate with action and perform a new state of data \nimport { Action } from \"./action\";\nconst initialState = {\n  // download waitting flag\n  isWaiting: false,\n  memories: []\n};\n\nfunction reducer(state = initialState, action) {\n  // return first initial state\n  switch (action.type) {\n    case Action.LoadMemories:\n      return { ...state,\n        isWaiting: false,\n        //action\n        memories: action.payload\n      };\n\n    case Action.FinishAddingOrder:\n      return { ...state,\n        isWaiting: false,\n        //action\n        memories: [{ ...action.payload,\n          isEditing: true\n        }, ...state.memories]\n      };\n\n    case Action.EnterEditMode:\n      return { ...state,\n        memories: state.memories.map(memory => {\n          if (memory.id === action.payload.id) {\n            return { ...memory,\n              isEditing: true\n            };\n          } else {\n            return memory;\n          }\n        })\n      };\n\n    case Action.LeaveEditMode:\n      return { ...state,\n        memories: state.memories.map(memory => {\n          if (memory.id === action.payload.id) {\n            return { ...memory,\n              isEditing: undefined\n            }; //desapear\n          } else {\n            return memory;\n          }\n        })\n      };\n\n    case Action.FinishSavingOrder:\n      return { ...state,\n        isWaiting: false,\n        memories: state.memories.map(memory => {\n          if (memory.id === action.payload.id) {\n            return action.payload; //desapear\n          } else {\n            return memory;\n          }\n        })\n      };\n\n    case Action.FinishDeletingOrder:\n      return { ...state,\n        isWaiting: false,\n        memories: state.memories.filter(memory => memory.id !== action.payload.id)\n      };\n\n    case Action.StartWaiting:\n      return { ...state,\n        isWaiting: true\n      };\n\n    default:\n      return state;\n  }\n} //only thing exported \n\n\nexport default reducer;","map":{"version":3,"sources":["C:/UWEC/CS268/Project2/CS268_WebProject2/project2/src/reducer.js"],"names":["Action","initialState","isWaiting","memories","reducer","state","action","type","LoadMemories","payload","FinishAddingOrder","isEditing","EnterEditMode","map","memory","id","LeaveEditMode","undefined","FinishSavingOrder","FinishDeletingOrder","filter","StartWaiting"],"mappings":"AAAA;AAEA,SAAQA,MAAR,QAAqB,UAArB;AACA,MAAMC,YAAY,GAAG;AACjB;AACAC,EAAAA,SAAS,EAAE,KAFM;AAGjBC,EAAAA,QAAQ,EAAG;AAHM,CAArB;;AAQA,SAASC,OAAT,CAAiBC,KAAK,GAAGJ,YAAzB,EAAuCK,MAAvC,EAA8C;AAC1C;AACA,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,MAAM,CAACQ,YAAZ;AACI,aAAM,EACF,GAAGH,KADD;AAEFH,QAAAA,SAAS,EAAE,KAFT;AAGF;AACAC,QAAAA,QAAQ,EAACG,MAAM,CAACG;AAJd,OAAN;;AAMJ,SAAKT,MAAM,CAACU,iBAAZ;AACI,aAAM,EACD,GAAGL,KADF;AAEDH,QAAAA,SAAS,EAAE,KAFV;AAGD;AACDC,QAAAA,QAAQ,EAAE,CAAC,EAAC,GAAGG,MAAM,CAACG,OAAX;AAAoBE,UAAAA,SAAS,EAAC;AAA9B,SAAD,EAAqC,GAAGN,KAAK,CAACF,QAA9C;AAJR,OAAN;;AAMJ,SAAKH,MAAM,CAACY,aAAZ;AACI,aAAM,EACF,GAAGP,KADD;AAEFF,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeU,GAAf,CAAmBC,MAAM,IAAE;AACjC,cAAGA,MAAM,CAACC,EAAP,KAAcT,MAAM,CAACG,OAAP,CAAeM,EAAhC,EAAmC;AAC/B,mBAAO,EAAC,GAAGD,MAAJ;AAAWH,cAAAA,SAAS,EAAE;AAAtB,aAAP;AACL,WAFC,MAEG;AACC,mBAAOG,MAAP;AACJ;AACH,SANS;AAFR,OAAN;;AAUH,SAAKd,MAAM,CAACgB,aAAZ;AACG,aAAM,EACF,GAAGX,KADD;AAEFF,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeU,GAAf,CAAmBC,MAAM,IAAE;AACjC,cAAGA,MAAM,CAACC,EAAP,KAAcT,MAAM,CAACG,OAAP,CAAeM,EAAhC,EAAmC;AAC/B,mBAAO,EAAC,GAAGD,MAAJ;AAAWH,cAAAA,SAAS,EAAEM;AAAtB,aAAP,CAD+B,CAE/B;AACH,WAHD,MAGK;AACD,mBAAOH,MAAP;AACH;AACH,SAPQ;AAFR,OAAN;;AAWJ,SAAKd,MAAM,CAACkB,iBAAZ;AACI,aAAM,EACF,GAAGb,KADD;AAEFH,QAAAA,SAAS,EAAE,KAFT;AAGFC,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeU,GAAf,CAAmBC,MAAM,IAAE;AACjC,cAAGA,MAAM,CAACC,EAAP,KAAcT,MAAM,CAACG,OAAP,CAAeM,EAAhC,EAAmC;AAC/B,mBAAOT,MAAM,CAACG,OAAd,CAD+B,CAE/B;AACH,WAHD,MAGK;AACD,mBAAOK,MAAP;AACH;AACJ,SAPS;AAHR,OAAN;;AAYJ,SAAKd,MAAM,CAACmB,mBAAZ;AACI,aAAM,EACF,GAAGd,KADD;AAEFH,QAAAA,SAAS,EAAE,KAFT;AAGFC,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeiB,MAAf,CAAsBN,MAAM,IAAGA,MAAM,CAACC,EAAP,KAAcT,MAAM,CAACG,OAAP,CAAeM,EAA5D;AAHR,OAAN;;AAKJ,SAAKf,MAAM,CAACqB,YAAZ;AACQ,aAAM,EACN,GAAGhB,KADG;AAENH,QAAAA,SAAS,EAAE;AAFL,OAAN;;AAIR;AACI,aAAOG,KAAP;AA/DR;AAiEH,C,CAGD;;;AACA,eAAeD,OAAf","sourcesContent":["// Take in old state of data store collaborate with action and perform a new state of data \r\n\r\nimport {Action} from \"./action\";\r\nconst initialState = {\r\n    // download waitting flag\r\n    isWaiting: false,\r\n    memories : [],\r\n};\r\n\r\n\r\n\r\nfunction reducer(state = initialState, action){\r\n    // return first initial state\r\n    switch(action.type){\r\n        case Action.LoadMemories:\r\n            return{\r\n                ...state,\r\n                isWaiting: false,\r\n                //action\r\n                memories:action.payload,\r\n            };\r\n        case Action.FinishAddingOrder:\r\n            return{\r\n                 ...state,\r\n                 isWaiting: false,\r\n                 //action\r\n                memories: [{...action.payload, isEditing:true},...state.memories],\r\n            };\r\n        case Action.EnterEditMode:\r\n            return{\r\n                ...state,\r\n                memories: state.memories.map(memory=>{\r\n                    if(memory.id === action.payload.id){\r\n                        return {...memory,isEditing: true};\r\n                  }else{\r\n                        return memory;\r\n                   }\r\n                }),\r\n            };\r\n         case Action.LeaveEditMode:\r\n            return{\r\n                ...state,\r\n                memories: state.memories.map(memory=>{\r\n                    if(memory.id === action.payload.id){\r\n                        return {...memory,isEditing: undefined};\r\n                        //desapear\r\n                    }else{\r\n                        return memory;\r\n                    }\r\n                 }),\r\n            };\r\n        case Action.FinishSavingOrder:\r\n            return{\r\n                ...state,\r\n                isWaiting: false,\r\n                memories: state.memories.map(memory=>{\r\n                    if(memory.id === action.payload.id){\r\n                        return action.payload;\r\n                        //desapear\r\n                    }else{\r\n                        return memory;\r\n                    }\r\n                }),\r\n            };\r\n        case Action.FinishDeletingOrder:\r\n            return{\r\n                ...state,\r\n                isWaiting: false,\r\n                memories: state.memories.filter(memory=> memory.id !== action.payload.id),\r\n        };\r\n        case Action.StartWaiting:\r\n                return{\r\n                ...state,\r\n                isWaiting: true,\r\n        };\r\n        default:\r\n            return state;\r\n        }\r\n}\r\n\r\n\r\n//only thing exported \r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}